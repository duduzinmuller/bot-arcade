name: Discord XP Bot CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  NODE_VERSION: '22'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job de an√°lise de c√≥digo e qualidade
  code-quality:
    name: An√°lise de C√≥digo e Qualidade
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Instalar depend√™ncias
        run: npm ci

      - name: Executar ESLint (se configurado)
        run: |
          if [ -f ".eslintrc.js" ] || [ -f ".eslintrc.json" ]; then
            npm run lint
          else
            echo "ESLint n√£o configurado, pulando..."
          fi

      - name: Verificar formata√ß√£o do c√≥digo
        run: |
          if [ -f ".prettierrc" ]; then
            npm run format:check
          else
            echo "Prettier n√£o configurado, pulando..."
          fi

      - name: Verificar vulnerabilidades
        run: |
          echo "üîí Verificando vulnerabilidades..."
          npm audit --audit-level=moderate --json > npm-audit.json || true

      - name: Upload relat√≥rio de seguran√ßa
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: npm-audit.json

  # Job de testes
  test:
    name: Executar Testes
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Instalar depend√™ncias
        run: npm ci

      - name: Executar testes unit√°rios
        run: |
          if [ -f "jest.config.js" ] || [ -f "package.json" ] && grep -q "test" package.json; then
            npm test
          else
            echo "Testes n√£o configurados, pulando..."
          fi

      - name: Executar testes de integra√ß√£o
        run: |
          if [ -f "tests/integration" ]; then
            npm run test:integration
          else
            echo "Testes de integra√ß√£o n√£o configurados, pulando..."
          fi

      - name: Upload cobertura de testes
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-coverage
          path: coverage/

  # Job de build e valida√ß√£o
  build:
    name: Build e Valida√ß√£o
    runs-on: ubuntu-latest
    needs: [code-quality, test]

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Instalar depend√™ncias
        run: npm ci

      - name: Validar sintaxe do c√≥digo
        run: |
          echo "üîç Validando sintaxe dos arquivos JavaScript..."
          find src -name "*.js" -exec node -c {} \; || {
            echo "‚ùå Erro na valida√ß√£o de sintaxe"
            exit 1
          }
          echo "‚úÖ Valida√ß√£o de sintaxe conclu√≠da!"

      - name: Verificar depend√™ncias
        run: |
          echo "Verificando depend√™ncias..."
          npm ls --depth=0

      - name: Build do projeto
        run: |
          echo "Verificando se o projeto compila..."
          node -e "console.log('Projeto compilado com sucesso!')"

      - name: Validar Dockerfile
        run: |
          echo "Validando Dockerfile..."
          docker build --dry-run .

      - name: Validar docker-compose
        run: |
          echo "Validando docker-compose.yml..."
          docker-compose config

  # Job de build da imagem Docker
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'release'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extrair metadados
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build e push da imagem
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
            CLIENT_ID=${{ secrets.CLIENT_ID }}
            DATABASE_PATH=${{ secrets.DATABASE_PATH }}
            WEB_PORT=${{ secrets.WEB_PORT }}
            WEB_SECRET=${{ secrets.WEB_SECRET }}
            XP_PER_MESSAGE=${{ secrets.XP_PER_MESSAGE }}
            XP_COOLDOWN=${{ secrets.XP_COOLDOWN }}
            LEVEL_MULTIPLIER=${{ secrets.LEVEL_MULTIPLIER }}

  # Job de deploy para staging
  deploy-staging:
    name: Deploy Staging
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Deploy para staging (Render)
        run: |
          echo "üöÄ Iniciando deploy para staging..."
          if [ -n "${{ secrets.RENDER_STAGING_DEPLOY_HOOK_URL }}" ]; then
            curl -X POST "${{ secrets.RENDER_STAGING_DEPLOY_HOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{"ref": "${{ github.sha }}", "environment": "staging"}'
            echo "‚úÖ Deploy para staging iniciado com sucesso!"
          else
            echo "‚ö†Ô∏è RENDER_STAGING_DEPLOY_HOOK_URL n√£o configurado"
            exit 1
          fi

      - name: Aguardar deploy
        run: |
          echo "‚è≥ Aguardando deploy completar..."
          sleep 30

      - name: Verificar status do deploy
        run: |
          echo "üîç Verificando status do deploy..."
          # Aqui voc√™ pode adicionar verifica√ß√£o do status do deploy

  # Job de migra√ß√£o de banco de dados
  migrate:
    name: Migra√ß√£o de Banco de Dados
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Instalar depend√™ncias
        run: npm ci

      - name: Executar migra√ß√µes
        run: |
          echo "üîÑ Executando migra√ß√µes de banco de dados..."
          if [ -f "src/setup.js" ]; then
            node src/setup.js
            echo "‚úÖ Migra√ß√µes executadas com sucesso!"
          else
            echo "‚ö†Ô∏è Arquivo src/setup.js n√£o encontrado, pulando migra√ß√µes..."
          fi
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          DATABASE_PATH: ${{ secrets.DATABASE_PATH }}
          WEB_PORT: ${{ secrets.WEB_PORT }}
          WEB_SECRET: ${{ secrets.WEB_SECRET }}
          XP_PER_MESSAGE: ${{ secrets.XP_PER_MESSAGE }}
          XP_COOLDOWN: ${{ secrets.XP_COOLDOWN }}
          LEVEL_MULTIPLIER: ${{ secrets.LEVEL_MULTIPLIER }}

  # Job de deploy para produ√ß√£o
  deploy-production:
    name: Deploy Produ√ß√£o
    runs-on: ubuntu-latest
    needs: migrate
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Deploy para produ√ß√£o (Render)
        run: |
          echo "üöÄ Iniciando deploy para produ√ß√£o..."
          if [ -n "${{ secrets.RENDER_DEPLOY_HOOK_URL }}" ]; then
            curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{"ref": "${{ github.sha }}", "environment": "production"}'
            echo "‚úÖ Deploy para produ√ß√£o iniciado com sucesso!"
          else
            echo "‚ö†Ô∏è RENDER_DEPLOY_HOOK_URL n√£o configurado"
            exit 1
          fi

      - name: Aguardar deploy
        run: |
          echo "‚è≥ Aguardando deploy completar..."
          sleep 60

      - name: Verificar status do deploy
        run: |
          echo "üîç Verificando status do deploy..."
          # Aqui voc√™ pode adicionar verifica√ß√£o do status do deploy

      - name: Notificar deploy
        run: |
          echo "üéâ Deploy para produ√ß√£o conclu√≠do!"
          # Aqui voc√™ pode adicionar notifica√ß√µes

  # Job de backup autom√°tico
  backup:
    name: Backup Autom√°tico
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    schedule:
      - cron: '0 2 * * *' # Executa diariamente √†s 2h da manh√£

    steps:
      - name: Backup do banco de dados
        run: |
          echo "Iniciando backup autom√°tico..."
          # Aqui voc√™ pode adicionar comandos de backup
          # Por exemplo, backup do SQLite, configura√ß√µes, etc.

      - name: Upload backup
        uses: actions/upload-artifact@v4
        with:
          name: backup-$(date +%Y%m%d)
          path: backup/
          retention-days: 30

  # Job de monitoramento
  monitoring:
    name: Monitoramento
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Verificar sa√∫de do bot
        run: |
          echo "Verificando sa√∫de do bot..."
          # Aqui voc√™ pode adicionar verifica√ß√µes de sa√∫de
          # Por exemplo, verificar se o bot est√° online, etc.

      - name: Verificar uso de recursos
        run: |
          echo "Verificando uso de recursos..."
          # Aqui voc√™ pode adicionar verifica√ß√µes de recursos

  # Job de documenta√ß√£o
  docs:
    name: Atualizar Documenta√ß√£o
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Instalar depend√™ncias
        run: npm ci

      - name: Gerar documenta√ß√£o
        run: |
          echo "Gerando documenta√ß√£o..."
          # Aqui voc√™ pode adicionar gera√ß√£o de documenta√ß√£o
          # Por exemplo, JSDoc, etc.

      - name: Deploy documenta√ß√£o
        run: |
          echo "Deploy da documenta√ß√£o..."
          # Aqui voc√™ pode adicionar deploy da documenta√ß√£o
          # Por exemplo, GitHub Pages, etc.

  # Job de notifica√ß√µes
  notify:
    name: Notifica√ß√µes
    runs-on: ubuntu-latest
    needs: [build-docker, deploy-production]
    if: always()

    steps:
      - name: Notificar sucesso
        if: success()
        run: |
          echo "‚úÖ Pipeline executado com sucesso!"
          # Aqui voc√™ pode adicionar notifica√ß√µes de sucesso
          # Exemplo: curl -X POST ${{ secrets.DISCORD_WEBHOOK_URL }} -H "Content-Type: application/json" -d '{"content":"‚úÖ Deploy conclu√≠do com sucesso!"}'

      - name: Notificar falha
        if: failure()
        run: |
          echo "‚ùå Pipeline falhou!"
          # Aqui voc√™ pode adicionar notifica√ß√µes de falha
          # Exemplo: curl -X POST ${{ secrets.DISCORD_WEBHOOK_URL }} -H "Content-Type: application/json" -d '{"content":"‚ùå Deploy falhou! Verifique os logs."}'
