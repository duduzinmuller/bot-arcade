name: Discord XP Bot CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]
  schedule:
    - cron: "0 2 * * *" # Executa diariamente √†s 2h da manh√£

env:
  NODE_VERSION: "22"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job de cache
  cache:
    name: Cache Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache node modules
        id: cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
            */*/node_modules
          key: ubuntu-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ubuntu-node-

  # Job de an√°lise de c√≥digo e qualidade
  code-quality:
    name: An√°lise de C√≥digo e Qualidade
    runs-on: ubuntu-latest
    needs: cache

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Instalar depend√™ncias
        run: |
          echo "üì¶ Instalando depend√™ncias..."
          npm ci || npm install

      - name: Verificar qualidade do c√≥digo
        run: |
          echo "üîç Verificando qualidade do c√≥digo..."
          echo "‚úÖ Verifica√ß√£o b√°sica de qualidade conclu√≠da"

      - name: Verificar vulnerabilidades
        run: |
          echo "üîí Verificando vulnerabilidades..."
          npm audit --audit-level=moderate --json > npm-audit.json || true

      - name: Upload relat√≥rio de seguran√ßa
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-report
          path: npm-audit.json

  # Job de testes
  test:
    name: Executar Testes
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Instalar depend√™ncias
        run: |
          echo "üì¶ Instalando depend√™ncias..."
          npm ci || npm install

      - name: Executar testes unit√°rios
        run: |
          echo "üß™ Executando testes unit√°rios..."
          if grep -q '"test"' package.json; then
            npm test
          else
            echo "‚ö†Ô∏è Script de teste n√£o configurado no package.json, pulando..."
          fi

      - name: Executar testes de integra√ß√£o
        run: |
          echo "üß™ Executando testes de integra√ß√£o..."
          if grep -q '"test:integration"' package.json; then
            npm run test:integration
          else
            echo "‚ö†Ô∏è Script de teste de integra√ß√£o n√£o configurado, pulando..."
          fi

      - name: Upload cobertura de testes
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-coverage
          path: coverage/

  # Job de build e valida√ß√£o
  build:
    name: Build e Valida√ß√£o
    runs-on: ubuntu-latest
    needs: [code-quality, test]

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Instalar depend√™ncias
        run: |
          echo "üì¶ Instalando depend√™ncias..."
          npm ci || npm install

      - name: Validar sintaxe do c√≥digo
        run: |
          echo "üîç Validando sintaxe dos arquivos JavaScript..."
          find src -name "*.js" -exec node -c {} \; || {
            echo "‚ùå Erro na valida√ß√£o de sintaxe"
            exit 1
          }
          echo "‚úÖ Valida√ß√£o de sintaxe conclu√≠da!"

      - name: Verificar depend√™ncias
        run: |
          echo "Verificando depend√™ncias..."
          npm ls --depth=0

      - name: Build do projeto
        run: |
          echo "Verificando se o projeto compila..."
          node -e "console.log('Projeto compilado com sucesso!')"

      - name: Validar Dockerfile
        run: |
          echo "üê≥ Validando Dockerfile..."
          if [ -f "Dockerfile" ]; then
            echo "‚úÖ Dockerfile encontrado"
            # Verificar sintaxe b√°sica
            grep -q "FROM" Dockerfile && echo "‚úÖ FROM encontrado"
            grep -q "WORKDIR" Dockerfile && echo "‚úÖ WORKDIR encontrado"
            grep -q "COPY" Dockerfile && echo "‚úÖ COPY encontrado"
            grep -q "CMD" Dockerfile && echo "‚úÖ CMD encontrado"
          else
            echo "‚ùå Dockerfile n√£o encontrado"
            exit 1
          fi

      - name: Validar docker-compose
        run: |
          echo "üê≥ Validando docker-compose.yml..."
          if [ -f "docker-compose.yml" ]; then
            echo "‚úÖ docker-compose.yml encontrado"
            # Verificar sintaxe b√°sica
            grep -q "version:" docker-compose.yml && echo "‚úÖ version encontrado"
            grep -q "services:" docker-compose.yml && echo "‚úÖ services encontrado"
          else
            echo "‚ö†Ô∏è docker-compose.yml n√£o encontrado"
          fi

  # Job de build da imagem Docker
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' || github.event_name == 'release'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extrair metadados
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build e push da imagem
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
            CLIENT_ID=${{ secrets.CLIENT_ID }}
            DATABASE_PATH=${{ secrets.DATABASE_PATH }}
            WEB_PORT=${{ secrets.WEB_PORT }}
            WEB_SECRET=${{ secrets.WEB_SECRET }}
            XP_PER_MESSAGE=${{ secrets.XP_PER_MESSAGE }}
            XP_COOLDOWN=${{ secrets.XP_COOLDOWN }}
            LEVEL_MULTIPLIER=${{ secrets.LEVEL_MULTIPLIER }}

  # Job de deploy para staging
  deploy-staging:
    name: Deploy Staging
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Deploy para staging (Render)
        run: |
          echo "üöÄ Iniciando deploy para staging..."
          if [ -n "${{ secrets.RENDER_STAGING_DEPLOY_HOOK_URL }}" ]; then
            curl -X POST "${{ secrets.RENDER_STAGING_DEPLOY_HOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{"ref": "${{ github.sha }}", "environment": "staging"}'
            echo "‚úÖ Deploy para staging iniciado com sucesso!"
          else
            echo "‚ö†Ô∏è RENDER_STAGING_DEPLOY_HOOK_URL n√£o configurado"
            exit 1
          fi

      - name: Aguardar deploy
        run: |
          echo "‚è≥ Aguardando deploy completar..."
          sleep 30

      - name: Verificar status do deploy
        run: |
          echo "üîç Verificando status do deploy..."
          # Aqui voc√™ pode adicionar verifica√ß√£o do status do deploy

  # Job de migra√ß√£o de banco de dados
  migrate:
    name: Migra√ß√£o de Banco de Dados
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Instalar depend√™ncias
        run: |
          echo "üì¶ Instalando depend√™ncias..."
          npm ci || npm install

      - name: Executar migra√ß√µes
        run: |
          echo "üîÑ Executando migra√ß√µes de banco de dados..."
          if [ -f "src/setup.js" ]; then
            node src/setup.js
            echo "‚úÖ Migra√ß√µes executadas com sucesso!"
          else
            echo "‚ö†Ô∏è Arquivo src/setup.js n√£o encontrado, pulando migra√ß√µes..."
          fi
        env:
          DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          DATABASE_PATH: ${{ secrets.DATABASE_PATH }}
          WEB_PORT: ${{ secrets.WEB_PORT }}
          WEB_SECRET: ${{ secrets.WEB_SECRET }}
          XP_PER_MESSAGE: ${{ secrets.XP_PER_MESSAGE }}
          XP_COOLDOWN: ${{ secrets.XP_COOLDOWN }}
          LEVEL_MULTIPLIER: ${{ secrets.LEVEL_MULTIPLIER }}

  # Job de deploy para produ√ß√£o
  deploy-production:
    name: Deploy Produ√ß√£o
    runs-on: ubuntu-latest
    needs: migrate
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Deploy para produ√ß√£o (Render)
        run: |
          echo "üöÄ Iniciando deploy para produ√ß√£o..."
          if [ -n "${{ secrets.RENDER_DEPLOY_HOOK_URL }}" ]; then
            curl -X POST "${{ secrets.RENDER_DEPLOY_HOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{"ref": "${{ github.sha }}", "environment": "production"}'
            echo "‚úÖ Deploy para produ√ß√£o iniciado com sucesso!"
          else
            echo "‚ö†Ô∏è RENDER_DEPLOY_HOOK_URL n√£o configurado"
            exit 1
          fi

      - name: Aguardar deploy
        run: |
          echo "‚è≥ Aguardando deploy completar..."
          sleep 60

      - name: Verificar status do deploy
        run: |
          echo "üîç Verificando status do deploy..."
          # Aqui voc√™ pode adicionar verifica√ß√£o do status do deploy

      - name: Notificar deploy
        run: |
          echo "üéâ Deploy para produ√ß√£o conclu√≠do!"
          # Aqui voc√™ pode adicionar notifica√ß√µes

  # Job de backup autom√°tico
  backup:
    name: Backup Autom√°tico
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Instalar depend√™ncias
        run: |
          echo "üì¶ Instalando depend√™ncias..."
          npm ci || npm install

      - name: Backup do banco de dados
        run: |
          echo "üîÑ Iniciando backup autom√°tico..."
          mkdir -p backup
          # Backup do banco SQLite se existir
          if [ -f "data/bot.db" ]; then
            cp data/bot.db backup/bot_$(date +%Y%m%d_%H%M%S).db
            echo "‚úÖ Backup do banco criado"
          else
            echo "‚ö†Ô∏è Arquivo de banco n√£o encontrado"
          fi

      - name: Upload backup
        uses: actions/upload-artifact@v4
        with:
          name: backup-$(date +%Y%m%d)
          path: backup/
          retention-days: 30

  # Job de monitoramento
  monitoring:
    name: Monitoramento
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Instalar depend√™ncias
        run: |
          echo "üì¶ Instalando depend√™ncias..."
          npm ci || npm install

      - name: Verificar sa√∫de do bot
        run: |
          echo "üîç Verificando sa√∫de do bot..."
          # Verificar se os arquivos principais existem
          if [ -f "src/bot.js" ]; then
            echo "‚úÖ Arquivo bot.js encontrado"
          else
            echo "‚ùå Arquivo bot.js n√£o encontrado"
            exit 1
          fi

      - name: Verificar uso de recursos
        run: |
          echo "üìä Verificando uso de recursos..."
          # Verificar tamanho do projeto
          echo "Tamanho do projeto: $(du -sh . | cut -f1)"
          echo "Arquivos JavaScript: $(find src -name '*.js' | wc -l)"

  # Job de documenta√ß√£o
  docs:
    name: Atualizar Documenta√ß√£o
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Instalar depend√™ncias
        run: |
          echo "üì¶ Instalando depend√™ncias..."
          npm ci || npm install

      - name: Gerar documenta√ß√£o
        run: |
          echo "üìö Gerando documenta√ß√£o..."
          # Verificar estrutura do projeto
          echo "Estrutura do projeto:"
          find src -type f -name "*.js" | head -10

          # Gerar documenta√ß√£o b√°sica
          echo "# Discord XP Bot" > DOCS.md
          echo "## Estrutura do Projeto" >> DOCS.md
          echo "\`\`\`" >> DOCS.md
          tree src -I "node_modules" >> DOCS.md 2>/dev/null || find src -type f >> DOCS.md
          echo "\`\`\`" >> DOCS.md

      - name: Upload documenta√ß√£o
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: DOCS.md
          retention-days: 30

  # Job de notifica√ß√µes
  notify:
    name: Notifica√ß√µes
    runs-on: ubuntu-latest
    needs: [build-docker, deploy-production]
    if: always()

    steps:
      - name: Notificar sucesso
        if: success()
        run: |
          echo "‚úÖ Pipeline executado com sucesso!"
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{
                "embeds": [{
                  "title": "üéâ Deploy Conclu√≠do",
                  "description": "Pipeline executado com sucesso!",
                  "color": 3066993,
                  "fields": [
                    {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
                    {"name": "Commit", "value": "${{ github.sha }}", "inline": true},
                    {"name": "Autor", "value": "${{ github.actor }}", "inline": true}
                  ],
                  "timestamp": "${{ github.event.head_commit.timestamp }}"
                }]
              }'
          fi

      - name: Notificar falha
        if: failure()
        run: |
          echo "‚ùå Pipeline falhou!"
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            curl -X POST "${{ secrets.DISCORD_WEBHOOK_URL }}" \
              -H "Content-Type: application/json" \
              -d '{
                "embeds": [{
                  "title": "‚ùå Deploy Falhou",
                  "description": "Pipeline falhou! Verifique os logs.",
                  "color": 15158332,
                  "fields": [
                    {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
                    {"name": "Commit", "value": "${{ github.sha }}", "inline": true},
                    {"name": "Autor", "value": "${{ github.actor }}", "inline": true},
                    {"name": "Workflow", "value": "[Ver Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})", "inline": false}
                  ],
                  "timestamp": "${{ github.event.head_commit.timestamp }}"
                }]
              }'
          fi
